hash（散列、杂凑）函数，是将任意长度的数据映射到有限长度的域上。直观解释起来，就是对一串数据m进行杂糅，输出另一段固定长度的数据h，作为这段数据的特征（指纹）。

正向代理和反向代理最大的区别就是：正向代理是服务于客户端的，它使服务端不知道到底是谁才是真正的请求者。反向代理是服务于服务器端的，它使客户			      端不知道到底哪台服务器真正处理了自己的请求。

JSON(JavaScript Object Notation)是一种轻量级的数据交换语言

Java中的数组排序方式：快速排序、冒泡排序、选择排序

JVM工作原理 : JVM在整个JDK中处于最底层，负责与操作系统的交互，用来屏蔽操作系统环境，提供一个完整的Java运行环境。因此也称为虚拟计算机。	       操作系统装入JVM是通过JDK中的java.exe来实现，主要通过以下几个步骤：
			（1）创建JVM装载环境和配置
			（2）装载jvm.dll
			（3）初始化jvm.dll
			（4）调用JNIEnv实力装载并处理class类。
			（5）运行Java程序。

三元运算符：A == B ？ true：false

java的Lambda表达式  ==〉                  接口 a1 = （参数） -〉{方法体}；

JSON：JavaScript Object Notation(JavaScript 对象表示法)、是存储和交换文本信息的语法

Servlet 生命周期:  加载servlet调用init()方法，再调用service()的doGet方法或doPost方法来接收、处理数据，然后调用destroy() 			            方法终止，最后由 JVM 进行垃圾回收		

集合 	-->>	Map：元素是key-value（键值对）

         			HashMap、LinkedHashMap
        			（HashedHashMap：被 HashMap取代、性能差、线程安全）

		Set：无序、元素不能重复、检索效率低下，删除和插入效率高

		         HashSet：仅仅存储对象、将对象存储在HashSet之前，要先确保对象重写equals()和hashCode()方法，			          		         这样才能比较对象的值是否相等
	
          		         LinkeHashSet：元素按添加顺序，性能略差HashSet

		List：有序、元素可以重复、查找效率高、删除和插入效率低下
	
			 ArrayList：基于数组，性能好
        			（Vector：被ArrayList取代，性能差、线程安全）

        			 LinkedList：基于链，性能略差，内存开销小（列表、队列、栈）	

		Queue：队列（Deque：双端队列、继承Queue）

         			ArrayDeque：基于数组、性能好
        			（Stack：被ArrayDeque取代、性能差、线程安全）

		HashSet判断元素重复的标准是通过equals比较返回true，且hashCode值相等。

		HashMap判断key重复的标准是通过equals比较返回true，且hashCode值相等。

		只要你的元素要放入HashSet或作为HashMap的key，该元素必须重写equals和hashCode

多线程	-->>	线程是操作系统能够进行运算调度的最小单位，是进程中的实际运作单位、可以使用多线程对运算密集型任务提速

		两种创建方式：一是继承Thread类、二是实现Runnable接口来重写run()方法
		
		可以用wait和notify方法来实现生产者消费者模型

		多线程中的死锁 ：指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象
		
		JDK1.5增加了Callable、它们的主要区别是Callable的 call() 方法可以返回值和抛出异常，而Runnable的run()方法			没有这些功能。

		Callable可以返回装载有计算结果的Future对象

IO流	-->>	Stream结尾的都是字节流
		Reader字符输入流
		Writer字符输出流

		使用对象流时：例如ObjectOutStream、对象类要实现Serializable接口

	